{"id":2861,"date":"2020-04-08T13:51:00","date_gmt":"2020-04-08T20:51:00","guid":{"rendered":"https:\/\/www.m4-engineering.com\/?p=2861"},"modified":"2020-12-10T09:16:07","modified_gmt":"2020-12-10T17:16:07","slug":"flutter-analysis-with-pynastran","status":"publish","type":"post","link":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/","title":{"rendered":"Flutter Analysis with pyNastran"},"content":{"rendered":"\t\t<div data-elementor-type=\"wp-post\" data-elementor-id=\"2861\" class=\"elementor elementor-2861\">\n\t\t\t\t\t\t<div class=\"elementor-inner\">\n\t\t\t\t<div class=\"elementor-section-wrap\">\n\t\t\t\t\t\t\t\t\t<section data-particle_enable=\"false\" data-particle-mobile-disabled=\"false\" class=\"elementor-section elementor-top-section elementor-element elementor-element-c7172da elementor-section-boxed elementor-section-height-default elementor-section-height-default\" data-id=\"c7172da\" data-element_type=\"section\">\n\t\t\t\t\t\t<div class=\"elementor-container elementor-column-gap-default\">\n\t\t\t\t\t\t\t<div class=\"elementor-row\">\n\t\t\t\t\t<div class=\"elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-36613ff7\" data-id=\"36613ff7\" data-element_type=\"column\">\n\t\t\t<div class=\"elementor-column-wrap elementor-element-populated\">\n\t\t\t\t\t\t\t<div class=\"elementor-widget-wrap\">\n\t\t\t\t\t\t<div class=\"elementor-element elementor-element-40c2db55 elementor-widget elementor-widget-text-editor\" data-id=\"40c2db55\" data-element_type=\"widget\" data-widget_type=\"text-editor.default\">\n\t\t\t\t<div class=\"elementor-widget-container\">\n\t\t\t\t\t\t\t\t<div class=\"elementor-text-editor elementor-clearfix\">\n\t\t\t\t<p>\u00a0pyNastran enables analysts using Nastran to efficiently create, manipulate, and extract data from models.\u00a0 It handles the underlying details so you get models that will run smoothly, without worrying about field formatting in the process.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Challenges:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:list --><\/p>\n<ul>\n<li>Ensuring correct field formatting<\/li>\n<li>Inefficiencies in model creation<\/li>\n<li>Organizing and analyzing large result files<\/li>\n<\/ul>\n<p><!-- \/wp:list --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Values:<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:list --><\/p>\n<ul>\n<li>Quick verification of correct geometry<\/li>\n<li>Easy accessibility of data<\/li>\n<li>Effortless conversions to desired units<\/li>\n<\/ul>\n<p><!-- \/wp:list --><\/p>\n<p><!-- wp:heading {\"level\":1} --><\/p>\n<h1>An Overview of pyNastran<\/h1>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>pyNastran is an open source Python interface library to the various Nastran file formats (BDF, OP2, OP4) that has had continuous development since 2011. Using the BDF interface, you can read, edit, and write Nastran geometry without worrying about field formatting. pyNastran also performs multiple checks to ensure your model is correct. Using the OP2 interface, you can read large result files quickly and efficiently. Additionally, you can extract a subset of the result data and write OP2 and F06 result files.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Rather than replacing FEMAP, Simcenter3D, or PATRAN, the goal of pyNastran is to make engineers more efficient and avoid some of the common pitfalls with model creation and manipulation, as well as make it easy to extract results and put them into external programs.\u00a0<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2820,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-1-1024x530.png\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>In this post, pyNastran will be used to demonstrate preliminary flutter analysis of an aircraft:<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:list --><\/p>\n<ul>\n<li>F06 Flutter plotting<\/li>\n<li>The pyNastran GUI<\/li>\n<li>Creating Animations<\/li>\n<\/ul>\n<p><!-- \/wp:list --><\/p>\n<p><!-- wp:heading --><\/p>\n<h2><a style=\"font-size: 20px;font-weight: 600;background-color: #ffffff\">General Aviation Aircraft Example\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<\/a><\/h2>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>This example is a notional two-passenger general aviation aircraft with an all-composite structure.\u00a0 The fuselage, wing, and tails were optimized with the propeller\/motor, batteries, and passengers all modeled as non-structural (concentrated) masses.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2821,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-3.png\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:heading --><\/p>\n<h2>\u00a0Step 1: Loading Geometry<\/h2>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Once the pyNastran GUI executable has been opened, the geometry can be loaded using the <strong>File -&gt; Load Geometry\u2026<\/strong> option.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2822,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-4.png\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph {\"align\":\"left\"} --><\/p>\n<p>Using the <strong>View -&gt;<\/strong> <strong>Edit Geometry Properties<\/strong> window, the opacity of the <em>main<\/em> model may also be increased to better see the internal structure.<\/p>\n<p>\u00a0<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2823,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-5-1024x711.jpg\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>\u00a0<\/p>\n<p>Zooming in and taking a look at the mesh with the edges (<strong>w<\/strong> for wireframe and <strong>e<\/strong> for edges or by using the <img loading=\"lazy\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/image.png\" alt=\"\" width=\"16\" height=\"16\" \/> and\u00a0<img loading=\"lazy\" style=\"font-family: 'Roboto Condensed', Arial, Helvetica, sans-serif;font-size: 14px;font-style: normal;font-weight: 400\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/tedges.png\" alt=\"\" width=\"16\" height=\"16\" \/>\u00a0icons, respectively) shows a quad dominated mesh.\u00a0 This is important as quads are more accurate so fewer elements can be used.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2826,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-6-1024x764.jpg\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Using the <strong>View -&gt; Edit Geometry Properties<\/strong> menu, we can also look at the <strong>material coordinate systems (MCID)<\/strong> for each layer (Layer 1-<strong><span style=\"color: red\">red<\/span><\/strong>, Layer 2-<strong><span style=\"color: blue\">blue<\/span><\/strong>, Layer 3-<strong><span style=\"color: black\">black<\/span><\/strong>) in order to verify that it\u2019s modeled as intended.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:gallery {\"ids\":[2827,2828]} --><\/p>\n<figure>\n<ul>\n<li>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-7.1.png\" alt=\"\" data-id=\"2827\" data-link=\"https:\/\/www.m4-engineering.com\/?attachment_id=2827\" \/><\/figure>\n<\/li>\n<li>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-7.png\" alt=\"\" data-id=\"2828\" data-link=\"https:\/\/www.m4-engineering.com\/?attachment_id=2828\" data-full-url=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-7.png\" \/><\/figure>\n<\/li>\n<\/ul>\n<\/figure>\n<p><!-- \/wp:gallery --><\/p>\n<p><!-- wp:heading --><\/p>\n<h2>Step 2: View Flutter Results<\/h2>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Working with aerodynamics often involves different unit systems.\u00a0 With English units, aerodynamic models require the use of PARAM,WTMASS to handle the conversion of weight to mass. However, PARAM,WTMASS does not convert air density units. To address this, the pyNastran F06 plotter handles the conversion for you. The unit system for the Electric GA model is presented below.<\/p>\n<p>\u00a0<\/p>\n<table>\n<tbody>\n<tr>\n<th><strong>Type<\/strong><\/th>\n<th><strong>Desired Units<\/strong><\/th>\n<\/tr>\n<tr>\n<td>PARAM, WTMASS<\/td>\n<td>1\/g = 1\/(12*32.2) = 0.002588<\/td>\n<\/tr>\n<tr>\n<td>Length<\/td>\n<td>inches<\/td>\n<\/tr>\n<tr>\n<td>Time<\/td>\n<td>seconds<\/td>\n<\/tr>\n<tr>\n<td>Input Velocity<\/td>\n<td>inches\/second<\/td>\n<\/tr>\n<tr>\n<td>Weight<\/td>\n<td>pounds<\/td>\n<\/tr>\n<tr>\n<td>Mass<\/td>\n<td>slinch<\/td>\n<\/tr>\n<tr>\n<td>Structural Density<\/td>\n<td>pounds\/inch<sup>3<\/sup><\/td>\n<\/tr>\n<tr>\n<td>Air Density<\/td>\n<td>slinch\/inch<sup>3<\/sup><\/td>\n<\/tr>\n<tr>\n<td>Output Velocity<\/td>\n<td>knots<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p>\u00a0<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>The flutter plotter supports a series of unit systems including:<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<table>\n<tbody>\n<tr>\n<th><strong>Unit System<\/strong><\/th>\n<th><strong>Input\/Output Velocity<\/strong><\/th>\n<\/tr>\n<tr>\n<td>english_in<\/td>\n<td>in\/sec<\/td>\n<\/tr>\n<tr>\n<td>english_ft<\/td>\n<td>ft\/sec<\/td>\n<\/tr>\n<tr>\n<td>english_kt<\/td>\n<td>knots<\/td>\n<\/tr>\n<tr>\n<td>SI<\/td>\n<td>m\/sec<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p><!-- wp:paragraph --><\/p>\n<p>The F06 output file has velocity in units of inches\/second, while it\u2019s desired to have the velocity plotted in knots (or possibly SI).\u00a0 Additionally, rather than true airspeed, the equivalent airspeed will be used.\u00a0 Equivalent airspeed normalizes the velocity to sea level to reduce the amount of analysis required using:<\/p>\n<p><!-- \/wp:paragraph --> <img class=\"aligncenter\" src=\"http:\/\/latex.codecogs.com\/gif.latex?V_{EAS} = V_{TAS} \\sqrt{\\frac{\\rho}{\\rho_0}}\" border=\"0\" \/> <!-- wp:paragraph --><\/p>\n<p>Create the flutter plots by typing the following on the command line:<\/p>\n<p><!-- \/wp:paragraph --> <span style=\"font-family: Courier New\"> f06 plot_145 general_aviation_flutter.f06 &#8211;nopoints &#8211;eas &#8211;in_units english_in &#8211;out_units english_kt &#8211;modes 1:15 &#8211;rootlocus <\/span> <!-- wp:paragraph --><\/p>\n<p>Where:<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:list --><\/p>\n<ul>\n<li><strong>eas<\/strong> flags switches from true airspeed to equivalent airspeed<\/li>\n<li><strong>modes<\/strong> 1:15 includes mode 1 to mode 15 to reduce clutter on the plot<\/li>\n<li><strong>rootlocus<\/strong> adds a root locus plot of the eigenvalues<\/li>\n<\/ul>\n<p><!-- \/wp:list --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>The Velocity vs. Damping (V-g) and Velocity vs. Frequency (V-f) curves are shown below.\u00a0 A negative damping corresponds to a stable mode, while a positive damping corresponds to an unstable mode.\u00a0 Another way to think about it is by asking the question: \u2018How much damping is required to make the aircraft mode stable?\u2019\u00a0 While a bit difficult to see, Mode 15 is the critical flutter mode and crosses from negative to positive damping at 290 knots.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2833,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-12.png\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Instability can sometimes be better seen using the root locus, which occurs when there is a root in the right half plane.\u00a0 Here, the points grow in size as velocity increases.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2834,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-13.png\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Zooming in on the plot can be accomplished by using the dynamic zooming buttons, so we can zoom in on Mode 15 to make its behavior more obvious.\u00a0<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"id\":2835,\"sizeSlug\":\"large\"} --><\/p>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-14.png\" alt=\"\" \/><\/figure>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Here we see a slight hump mode instability (at imaginary eigenvalue of 188.9; roughly 125 knots), but it\u2019s not a concern as structural damping will address this.\u00a0 There is a more severe instability developing as the speed (and point size) gets larger.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:heading --><\/p>\n<h2>Step 3: Animating Flutter Mode Shapes<\/h2>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>We can load the flutter result by selecting <strong>File -&gt; Load Results&#8230;<\/strong> and selecting the result case from the sidebar.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"align\":\"center\",\"id\":2836,\"sizeSlug\":\"large\"} --><\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-15-1024x530.png\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Opening the <strong>View -&gt; Create Animation\u2026 <\/strong>menu brings up the following menu.\u00a0 As this is a complex result, it\u2019s best to set the <strong>Animation Type<\/strong> to <strong>Phase<\/strong> and click <strong>Run<\/strong> the animation.\u00a0 Update the <strong>scale<\/strong>, <strong>total time<\/strong>, <strong>frames\/second<\/strong> as necessary to generate a smooth result.<\/p>\n<div>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-16.png\" alt=\"\" \/><\/figure>\n<\/div>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Once you are satisfied, unclick the <strong>Animate in GUI<\/strong> button and click <strong>Run<\/strong> to create an animation.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:image {\"id\":2840,\"sizeSlug\":\"large\"} --><\/p>\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/electric_ga_flutter_mode_shape_eigenvectors.gif\" alt=\"\" \/><\/figure>\n<p><!-- \/wp:image --><\/p>\n<p><!-- wp:heading {\"level\":1} --><\/p>\n<h1>Conclusion<\/h1>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>This post has provided a basic overview of the pyNastran GUI.\u00a0 The F06 flutter plotter has been shown with an emphasis on a preliminary flutter analysis of a notional general aviation aircraft.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:heading --><\/p>\n<h2>How to Obtain pyNastran<\/h2>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>The GUI is available for download at: <a href=\"https:\/\/sourceforge.net\/projects\/pynastran\/files\/?source=navbar\">https:\/\/sourceforge.net\/projects\/pynastran\/files\/?source=navbar<\/a><\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>The source code can be found at: <a href=\"https:\/\/github.com\/SteveDoyle2\/pyNastran\">https:\/\/github.com\/SteveDoyle2\/pyNastran<\/a>.<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Or installed by running:<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>&gt;&gt;&gt; pip install pyNastran<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>The documentation can be found at: <a href=\"https:\/\/pynastran-git.readthedocs.io\/en\/1.3\/quick_start\/index.html\">https:\/\/pynastran-git.readthedocs.io\/en\/1.3\/quick_start\/index.html<\/a>.\u00a0<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Note: pyNastran is an open source project; bug reports, feature requests and help with development is appreciated and encouraged \ud83d\ude0a<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<p><!-- wp:media-text {\"mediaId\":2838,\"mediaType\":\"image\",\"mediaWidth\":25} --><\/p>\n<div style=\"grid-template-columns: 25% auto\">\n<figure><img src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-18.jpg\" alt=\"\" \/><\/figure>\n<div>\n<p><!-- wp:heading --><\/p>\n<h2>Written by Steve Doyle<\/h2>\n<p><!-- \/wp:heading --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p>Steve Doyle is a Senior Aerospace Engineer with a background in structural analysis, CFD, and programming.\u00a0 He\u2019s also the author of pyNastran.\u00a0 Outside of dorky projects, he likes to hike and rock climb!<\/p>\n<p><!-- \/wp:paragraph --><\/p>\n<\/div>\n<\/div>\n<p><!-- \/wp:media-text --><\/p>\n<p><!-- wp:paragraph --><\/p>\n<p><!-- \/wp:paragraph --><\/p>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t<\/div>\n\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t<\/section>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t","protected":false},"excerpt":{"rendered":"<p>pyNastran enables analysts using Nastran to efficiently create, manipulate, and extract data from models.&nbsp; It handles the underlying details so you get models that will run smoothly, without worrying about field formatting in the process. Challenges: Ensuring correct field formatting Inefficiencies in model creation Organizing and analyzing large result files Values: Quick verification of correct [&hellip;]<\/p>\n","protected":false},"author":12,"featured_media":2884,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"content-type":""},"categories":[18],"tags":[138,204,92,231],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Flutter Analysis with pyNastran - M4 Engineering<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Flutter Analysis with pyNastran - M4 Engineering\" \/>\n<meta property=\"og:description\" content=\"pyNastran enables analysts using Nastran to efficiently create, manipulate, and extract data from models.&nbsp; It handles the underlying details so you get models that will run smoothly, without worrying about field formatting in the process. Challenges: Ensuring correct field formatting Inefficiencies in model creation Organizing and analyzing large result files Values: Quick verification of correct [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/\" \/>\n<meta property=\"og:site_name\" content=\"M4 Engineering\" \/>\n<meta property=\"article:published_time\" content=\"2020-04-08T20:51:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-12-10T17:16:07+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-2.png\" \/>\n\t<meta property=\"og:image:width\" content=\"1329\" \/>\n\t<meta property=\"og:image:height\" content=\"688\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/png\" \/>\n<meta name=\"author\" content=\"Steve Doyle\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Steve Doyle\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"5 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Article\",\"@id\":\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/\"},\"author\":{\"name\":\"Steve Doyle\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/person\/a0ec04b00d9d044c6577aed56f571713\"},\"headline\":\"Flutter Analysis with pyNastran\",\"datePublished\":\"2020-04-08T20:51:00+00:00\",\"dateModified\":\"2020-12-10T17:16:07+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/\"},\"wordCount\":1061,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#organization\"},\"keywords\":[\"aerodynamics\",\"Flutter\",\"Nastran\",\"pyNastran\"],\"articleSection\":[\"Technical Blog\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#respond\"]}]},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/\",\"url\":\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/\",\"name\":\"Flutter Analysis with pyNastran - M4 Engineering\",\"isPartOf\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#website\"},\"datePublished\":\"2020-04-08T20:51:00+00:00\",\"dateModified\":\"2020-12-10T17:16:07+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.m4-engineering.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Flutter Analysis with pyNastran\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.m4-engineering.com\/#website\",\"url\":\"https:\/\/www.m4-engineering.com\/\",\"name\":\"M4 Engineering\",\"description\":\"Engineering\",\"publisher\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.m4-engineering.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.m4-engineering.com\/#organization\",\"name\":\"M4 Engineering\",\"url\":\"https:\/\/www.m4-engineering.com\/\",\"sameAs\":[],\"logo\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/\",\"url\":\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png\",\"contentUrl\":\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png\",\"width\":2000,\"height\":684,\"caption\":\"M4 Engineering\"},\"image\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/\"}},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/person\/a0ec04b00d9d044c6577aed56f571713\",\"name\":\"Steve Doyle\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/773307557281494b71959a7a080da238?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/773307557281494b71959a7a080da238?s=96&d=mm&r=g\",\"caption\":\"Steve Doyle\"},\"url\":\"https:\/\/www.m4-engineering.com\/author\/sdoyle\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Flutter Analysis with pyNastran - M4 Engineering","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/","og_locale":"en_US","og_type":"article","og_title":"Flutter Analysis with pyNastran - M4 Engineering","og_description":"pyNastran enables analysts using Nastran to efficiently create, manipulate, and extract data from models.&nbsp; It handles the underlying details so you get models that will run smoothly, without worrying about field formatting in the process. Challenges: Ensuring correct field formatting Inefficiencies in model creation Organizing and analyzing large result files Values: Quick verification of correct [&hellip;]","og_url":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/","og_site_name":"M4 Engineering","article_published_time":"2020-04-08T20:51:00+00:00","article_modified_time":"2020-12-10T17:16:07+00:00","og_image":[{"width":1329,"height":688,"url":"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/04\/pynastran-2.png","type":"image\/png"}],"author":"Steve Doyle","twitter_card":"summary_large_image","twitter_misc":{"Written by":"Steve Doyle","Est. reading time":"5 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Article","@id":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#article","isPartOf":{"@id":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/"},"author":{"name":"Steve Doyle","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/person\/a0ec04b00d9d044c6577aed56f571713"},"headline":"Flutter Analysis with pyNastran","datePublished":"2020-04-08T20:51:00+00:00","dateModified":"2020-12-10T17:16:07+00:00","mainEntityOfPage":{"@id":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/"},"wordCount":1061,"commentCount":0,"publisher":{"@id":"https:\/\/www.m4-engineering.com\/#organization"},"keywords":["aerodynamics","Flutter","Nastran","pyNastran"],"articleSection":["Technical Blog"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#respond"]}]},{"@type":"WebPage","@id":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/","url":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/","name":"Flutter Analysis with pyNastran - M4 Engineering","isPartOf":{"@id":"https:\/\/www.m4-engineering.com\/#website"},"datePublished":"2020-04-08T20:51:00+00:00","dateModified":"2020-12-10T17:16:07+00:00","breadcrumb":{"@id":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.m4-engineering.com\/flutter-analysis-with-pynastran\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.m4-engineering.com\/"},{"@type":"ListItem","position":2,"name":"Flutter Analysis with pyNastran"}]},{"@type":"WebSite","@id":"https:\/\/www.m4-engineering.com\/#website","url":"https:\/\/www.m4-engineering.com\/","name":"M4 Engineering","description":"Engineering","publisher":{"@id":"https:\/\/www.m4-engineering.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.m4-engineering.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https:\/\/www.m4-engineering.com\/#organization","name":"M4 Engineering","url":"https:\/\/www.m4-engineering.com\/","sameAs":[],"logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/","url":"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png","contentUrl":"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png","width":2000,"height":684,"caption":"M4 Engineering"},"image":{"@id":"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/"}},{"@type":"Person","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/person\/a0ec04b00d9d044c6577aed56f571713","name":"Steve Doyle","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/773307557281494b71959a7a080da238?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/773307557281494b71959a7a080da238?s=96&d=mm&r=g","caption":"Steve Doyle"},"url":"https:\/\/www.m4-engineering.com\/author\/sdoyle\/"}]}},"_links":{"self":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts\/2861"}],"collection":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/users\/12"}],"replies":[{"embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/comments?post=2861"}],"version-history":[{"count":23,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts\/2861\/revisions"}],"predecessor-version":[{"id":2920,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts\/2861\/revisions\/2920"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/media\/2884"}],"wp:attachment":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/media?parent=2861"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/categories?post=2861"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/tags?post=2861"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}