{"id":3234,"date":"2020-06-10T22:42:00","date_gmt":"2020-06-11T05:42:00","guid":{"rendered":"https:\/\/www.m4-engineering.com\/?p=3234"},"modified":"2020-12-10T09:13:32","modified_gmt":"2020-12-10T17:13:32","slug":"automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python","status":"publish","type":"post","link":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/","title":{"rendered":"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python"},"content":{"rendered":"\t\t<div data-elementor-type=\"wp-post\" data-elementor-id=\"3234\" class=\"elementor elementor-3234\">\n\t\t\t\t\t\t<div class=\"elementor-inner\">\n\t\t\t\t<div class=\"elementor-section-wrap\">\n\t\t\t\t\t\t\t\t\t<section data-particle_enable=\"false\" data-particle-mobile-disabled=\"false\" class=\"elementor-section elementor-top-section elementor-element elementor-element-e9e0254 elementor-section-boxed elementor-section-height-default elementor-section-height-default\" data-id=\"e9e0254\" data-element_type=\"section\">\n\t\t\t\t\t\t<div class=\"elementor-container elementor-column-gap-default\">\n\t\t\t\t\t\t\t<div class=\"elementor-row\">\n\t\t\t\t\t<div class=\"elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-a76e911\" data-id=\"a76e911\" data-element_type=\"column\">\n\t\t\t<div class=\"elementor-column-wrap elementor-element-populated\">\n\t\t\t\t\t\t\t<div class=\"elementor-widget-wrap\">\n\t\t\t\t\t\t<div class=\"elementor-element elementor-element-6838521 elementor-widget elementor-widget-text-editor\" data-id=\"6838521\" data-element_type=\"widget\" data-widget_type=\"text-editor.default\">\n\t\t\t\t<div class=\"elementor-widget-container\">\n\t\t\t\t\t\t\t\t<div class=\"elementor-text-editor elementor-clearfix\">\n\t\t\t\t<p>Learn how NXOpen can be used to combine and envelop load cases in Simcenter 3D. Take advantage of this capability to achieve quicker analysis turnaround and architect a more seamless multi-disciplinary optimization workflow.<\/p><p>Challenges:<\/p><ul><li>Large number of load case combinations<\/li><li>Frequent design iterations<\/li><li>Manual process is time-consuming with slow turnaround<\/li><li>Majority of time spent performing analysis<\/li><\/ul><p>Values:<\/p><ul><li>Easily scale number of load cases considered<\/li><li>Automated process results in quicker turnaround<\/li><li>Process can be leveraged as part of optimization framework<\/li><li>Spend more time exploring design alternatives<\/li><\/ul><h1>Overview of NXOpen<\/h1><p>NXOpen is an Application Programming Interface (API) that gives the user access to the NX\/Simcenter 3D model and tool commands, allowing the user to customize and extend the baseline software capabilities. For example, applications might include:<\/p><ul><li>Creation and manipulation of part geometry and\/or drawings<\/li><li>Data importing or parsing of model geometry information and analysis results<\/li><li>Scripts for automating of repetitive tasks<\/li><\/ul><p>The <a href=\"https:\/\/docs.plm.automation.siemens.com\/data_services\/resources\/nx\/12\/nx_api\/common\/en_US\/graphics\/fileLibrary\/nx\/nxopen\/nxopen_getting_started_v12.pdf\">NXOpen Getting Started Guide<\/a> and <a href=\"https:\/\/docs.plm.automation.siemens.com\/tdoc\/nx\/12\/nx_api#uid:xid1162445:index_nxopen_prog_guide\">NXOpen Programmer\u2019s Guide<\/a> are useful starting points for further understanding the tools capabilities. NXOpen can be used with multiple well-known programming languages, including C#, C++, Java, Python, and Visual Basic. In our case, we will leverage NXOpen using Python. The <a href=\"https:\/\/docs.plm.automation.siemens.com\/data_services\/resources\/nx\/12\/nx_api\/custom\/en_US\/nxopen_python_ref\/index.html\">NXOpen Python Reference Guide<\/a> is a useful resource for understanding the package-class-method structure.<\/p><p>For hands-on learners, the NX\/Simcenter 3D software supports auto-generation of NXOpen code corresponding to interactions with the Graphical User Interface (GUI). A walk-through of the steps required to auto-generate NXOpen code is as follows:<\/p><ol><li>Set the preferred programming language by going to <strong>File -&gt; Preferences -&gt; User Interface<\/strong>. Next, select <strong>Tools -&gt; Journal<\/strong> from the available options and click on the radio button corresponding to programming language that should be used when auto-generating NXOpen code.<img loading=\"lazy\" class=\"aligncenter wp-image-3223\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_2-300x244.png\" alt=\"\" width=\"400\" height=\"325\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_2-300x244.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_2.png 586w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><\/li><li>Select the <strong>Record<\/strong> button in the <strong>Developer<\/strong> tab and specify the file path to where the auto-generated NXOpen code will be written.<img loading=\"lazy\" class=\"aligncenter wp-image-3224 size-large\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_3-1024x112.png\" alt=\"\" width=\"1024\" height=\"112\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_3-1024x112.png 1024w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_3-300x33.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_3-768x84.png 768w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_3.png 1199w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/li><li>Each interaction with the GUI will then be recorded until the <strong>Stop Recording<\/strong> button in the <strong>Developer<\/strong> tab is selected<\/li><\/ol><p><img loading=\"lazy\" class=\"aligncenter wp-image-3225 size-large\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_4-1024x113.png\" alt=\"\" width=\"1024\" height=\"113\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_4-1024x113.png 1024w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_4-300x33.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_4-768x85.png 768w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_4.png 1199w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/p><h1>Example Geometry and Problem Description<\/h1><p>To further explore the use of NXOpen, imagine a cylindrical pressure vessel with a flange extending outward from the dome center on one end, as shown below.<img loading=\"lazy\" class=\"aligncenter wp-image-3226 size-large\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_5-1024x260.png\" alt=\"\" width=\"1024\" height=\"260\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_5-1024x260.png 1024w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_5-300x76.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_5-768x195.png 768w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_5.png 1266w\" sizes=\"(max-width: 1024px) 100vw, 1024px\" \/><\/p><p>The flange connects the fuel in the tank to the propulsion system via a pipe routing network. The propulsion forces at the engine generates loads back on the flange. A conservative bound on the induced limit forces and moments in each direction is determined and taken to be \u00b19000 N in X, \u00b12000 N in Y, \u00b12000 N in Z, \u00b1100 Nm about X, \u00b15000 Nm about Y, and \u00b15000 Nm about Z. To determine if the current design will yield under limit loading conditions, all possible linear combinations of the forces and moments must be analyzed. To do so, the limit force and moment in each axis direction is analyzed separately using the Nastran Static Structural solver, and load combination and enveloping is used to determine the maximum stress across all potential load combinations. Since we expect the stress concentrations to occur near the flange-dome connection, only the components near that connection are considered in the following work, as seen below.<\/p><p>The loads are applied through a point rigidly connected to the flange lip nodes and a fixed boundary constraint is applied to the circumferential dome nodes that connect to the pressure vessel cylindrical body.<img loading=\"lazy\" class=\"aligncenter wp-image-3227 size-medium\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_6-266x300.png\" alt=\"\" width=\"266\" height=\"300\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_6-266x300.png 266w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_6.png 634w\" sizes=\"(max-width: 266px) 100vw, 266px\" \/><\/p><h1>Source Code<\/h1><p>The source code is available for download via link at the end of the post. Use the source code to follow along. Only portions of the source code will be referenced in the following sections.<\/p><h1>Step 1: Define Script Workflow<\/h1><p>Firstly, we will assume that the geometry model, finite-element model, and the limit load cases in each axis direction have been setup and the limit load cases have run without error. The script begins by importing the required NXOpen packages. Refer to the <a href=\"https:\/\/docs.plm.automation.siemens.com\/data_services\/resources\/nx\/12\/nx_api\/custom\/en_US\/nxopen_python_ref\/index.html\">NXOpen Python Reference Guide<\/a> to determine which packages you can import. If using the journaling feature to auto-generate NXOpen code, all necessary imports will be generated automatically. The NXOpen package contains the basic tools to get started and should always be included as an import. In our case, we are interested in automating result post-processing, so we also import the NXOpen.CAE package to get access to tools available in Simcenter Pre\/Post.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3248\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_1.jpg\" alt=\"\" width=\"923\" height=\"63\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_1.jpg 923w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_1-300x20.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_1-768x52.jpg 768w\" sizes=\"(max-width: 923px) 100vw, 923px\" \/><\/p><p>The next step is to instantiate the working session reference parameters. First, we use the NXOpen package to grab the active session object. Second, we use the session object to access the active work part object. Third, we use the active work part object to access the associated simulation object.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3249\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_2.jpg\" alt=\"\" width=\"918\" height=\"86\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_2.jpg 918w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_2-300x28.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_2-768x72.jpg 768w\" sizes=\"(max-width: 918px) 100vw, 918px\" \/><\/p><p>When opening a fresh session, the limit load cases will not have the results loaded. The same is true when creating a combined or enveloped load case. The result is generated, but not loaded into the active session by default. Consequently, we will need a function for automating the loading of result data by load case name. Below, we use the <strong>load_solution_results <\/strong>function (to be discussed in Step 2) to load the limit load cases in each axis direction. The function to load the solution results returns a pointer to the solution instance. The solution instances can have multiple subcases, and each subcase can have multiple iterations (e.g. transient solution). Since we are performing a static structural analysis with a single subcase, we can access the first subcase and iteration entry to get a direct pointer to the solution data of interest.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3250\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_3.jpg\" alt=\"\" width=\"918\" height=\"190\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_3.jpg 918w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_3-300x62.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_3-768x159.jpg 768w\" sizes=\"(max-width: 918px) 100vw, 918px\" \/><\/p><p>After loading and setting up pointers to the load cases we wish to combine, the array of load combination multipliers is generated using a Python list comprehension. This is also where we get a glimpse into the power at our fingertips when using the NXOpen + Python utility. We are not just confined to using NXOpen API commands, but are free to leverage the extensive Python third-party libraries and integrate them with existing NX\/Simcenter 3D workflows to dramatically customize and extend current tool capabilities.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3251\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_4.jpg\" alt=\"\" width=\"921\" height=\"140\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_4.jpg 921w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_4-300x46.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_4-768x117.jpg 768w\" sizes=\"(max-width: 921px) 100vw, 921px\" \/><\/p><p>The list of load combination multipliers is iterated over and the <strong>create_load_combination<\/strong> function (to be discussed in Step 3) is used to combine the load case elemental stresses. After creating the combined load case, the <strong>load_solution_results<\/strong> function is used to load the result file into the active session. Lastly, the load combination information is stored into a running list that will be used during the enveloping step.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3252\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_5.jpg\" alt=\"\" width=\"913\" height=\"383\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_5.jpg 913w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_5-300x126.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_5-768x322.jpg 768w\" sizes=\"(max-width: 913px) 100vw, 913px\" \/><\/p><p>After all combined load cases have been generated and loaded into the active session, the <strong>create_load_envelope<\/strong> function (to be discussed in Step 4) is used to envelope the maximum Von-Mises stress across all load combinations. Lastly, the <strong>load_solution_results<\/strong> function is used to load the result file into the active session.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3253\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_6.jpg\" alt=\"\" width=\"917\" height=\"153\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_6.jpg 917w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_6-300x50.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_6-768x128.jpg 768w\" sizes=\"(max-width: 917px) 100vw, 917px\" \/><\/p><h1>Step 2: Automate Result Loading<\/h1><p>To automate result loading, we interrogate the simulation object for a solution instance that matches a name key. The name key is simply the name assigned to the solution instance in Simcenter 3D. Once we have the solution instance, we can then interrogate it for results of type <em>Structural<\/em> and then use the session object to load in results that match the solution instance name.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3254\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_7.jpg\" alt=\"\" width=\"879\" height=\"65\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_7.jpg 879w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_7-300x22.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_7-768x57.jpg 768w\" sizes=\"(max-width: 879px) 100vw, 879px\" \/><\/p><h1>Step 3: Automate Load Case Combination<\/h1><p>To automate load case combinations, the session object is used to create a <strong>ResultsCombinationBuilder<\/strong> object. The first step requires passing in the result data that will be used in the load combination, a name label, and the unit system assigned to the result data. In our case, the <strong>result_name<\/strong> and <strong>result_type<\/strong> parameters are set to <em>Stress<\/em> and <em>Elemental<\/em>, respectively. Alternatively, if we were interested in combining nodal reaction forces, we would instead set <strong>result_name<\/strong> to <em>Reaction Force<\/em> and <strong>result_type<\/strong> to <em>Nodal<\/em>. After identifying the load case result data to use, the load combination is defined as a linear superposition of all the limit load cases with load case multipliers unique to each load case combination.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3255\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_8.jpg\" alt=\"\" width=\"917\" height=\"244\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_8.jpg 917w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_8-300x80.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_8-768x204.jpg 768w\" sizes=\"(max-width: 917px) 100vw, 917px\" \/><\/p><p>Next, the combined solution creation parameters are specified such that the combined load case is generated as its own solution instance, rather than being lumped into an existing solution instance as an additional subcase or iteration. The output quantity of interest is set to <em>Stress<\/em> and the path to an output file is provided, in order to generate an ASCII version of the result data for post-processing outside of Simcenter 3D or for re-reading the result data into another Simcenter 3D session.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3256\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_9.jpg\" alt=\"\" width=\"918\" height=\"296\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_9.jpg 918w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_9-300x97.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_9-768x248.jpg 768w\" sizes=\"(max-width: 918px) 100vw, 918px\" \/><\/p><p>The unit system associated with the combined solution output is setup to be read in from an existing file, ensuring unit consistency. The <strong>unit_ref_solution <\/strong>variable can be\u00a0any of the solution objects associated with the limit load cases. Error handling conditions are skipped in our case, but logic can be added for customizing program behavior when running into these types of errors. Lastly the <strong>ResultsCombinationBuilder <\/strong>object data is committed to the active session and thereafter removed from memory.<\/p><p><img loading=\"lazy\" class=\"aligncenter size-full wp-image-3257\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_10.jpg\" alt=\"\" width=\"920\" height=\"262\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_10.jpg 920w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_10-300x85.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_10-768x219.jpg 768w\" sizes=\"(max-width: 920px) 100vw, 920px\" \/><\/p><p>Stress contours for selected combined load cases, and the corresponding load case combination equations, are shown below:<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3228\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_7.png\" alt=\"\" width=\"1530\" height=\"792\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_7.png 1530w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_7-300x155.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_7-1024x530.png 1024w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_7-768x398.png 768w\" sizes=\"(max-width: 1530px) 100vw, 1530px\" \/><\/p><h1>Step 4: Automate Load Case Enveloping<\/h1><p>The automation of load case enveloping is very similar to load case combination. To begin, the session object is used to create a <strong>ResultsEnvelopeBuilder<\/strong> object. The first step requires passing in the result data that will be used in the load enveloping, an ID label, and the result parameters defining the data and operations used to envelope across the input load cases.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3258\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_11.jpg\" alt=\"\" width=\"917\" height=\"609\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_11.jpg 917w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_11-300x199.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_11-768x510.jpg 768w\" sizes=\"(max-width: 917px) 100vw, 917px\" \/><\/p><p>Next, the enveloped solution creation parameters are specified such that the enveloped load case is generated as its own solution instance, rather than being lumped into an existing solution instance as an additional subcase or iteration. The output quantity of interest is set to Stress and the path to an output file is provided, in order to generate an ASCII version of the result data for post-processing outside of Simcenter 3D or for re-reading the result data into another Simcenter 3D session.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3259\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_12.jpg\" alt=\"\" width=\"915\" height=\"234\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_12.jpg 915w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_12-300x77.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_12-768x196.jpg 768w\" sizes=\"(max-width: 915px) 100vw, 915px\" \/><\/p><p>The unit system associated with the enveloped solution output is setup to be read in from an existing file, ensuring unit consistency. The <strong>unit_ref_solution<\/strong>\u00a0variable can be any of the solution objects associated with the limit load cases. Error handling conditions are skipped in our case, but logic can be added for customizing program behavior when running into these types of errors. Lastly the <strong>ResultsEnvelopeBuilder<\/strong> object data is committed to the active session and thereafter removed from memory.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3260\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_13.jpg\" alt=\"\" width=\"916\" height=\"247\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_13.jpg 916w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_13-300x81.jpg 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/s3d_13-768x207.jpg 768w\" sizes=\"(max-width: 916px) 100vw, 916px\" \/><\/p><h1>Step 5: Run Script and Review Results<\/h1><p>To run the script, simply navigate to the <strong>Developer<\/strong> tab and select the <strong>Play<\/strong> button, as seen below. Then browse to your script and run when ready.<img loading=\"lazy\" class=\"aligncenter size-full wp-image-3229\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_8.png\" alt=\"\" width=\"1193\" height=\"132\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_8.png 1193w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_8-300x33.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_8-1024x113.png 1024w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_8-768x85.png 768w\" sizes=\"(max-width: 1193px) 100vw, 1193px\" \/><\/p><p>The enveloped Von-Mises stresses and associated critical load case ID by element are shown below. The peak stresses are concentrated in the transition region between the flange and the tank dome, as expected. The peak stress across all load cases is 62ksi. The tank and flange materials are assumed to be made from an Aluminum-Lithium alloy with a yield strength of 59ksi. The current design will thus yield under the limit loading conditions. So what now? We will still have to iterate through the design-analyze cycle, but thanks to the automated post-processing procedure, more time can be spent exploring alternative design choices with less time spent executing the analysis steps. Furthermore, the automated tool developed using NXOpen + Python can even be leveraged by optimization frameworks, such as Simcenter HEEDS, for performing automated design exploration that is tied to the geometry model. Alas, we will leave that topic for another time.<img loading=\"lazy\" class=\"wp-image-3230 alignnone\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_9-300x244.png\" alt=\"\" width=\"400\" height=\"325\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_9-300x244.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_9-768x625.png 768w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_9.png 826w\" sizes=\"(max-width: 400px) 100vw, 400px\" \/><img loading=\"lazy\" class=\"alignnone wp-image-3231\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_10-300x269.png\" alt=\"\" width=\"363\" height=\"325\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_10-300x269.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/simcenter3d_10.png 754w\" sizes=\"(max-width: 363px) 100vw, 363px\" \/><\/p><h1>Summary:<\/h1><p>In brief, we looked at the utility of leveraging NXOpen + Python as part of our analysis workflow. In particular, we looked at speeding up our analysis turnaround by focusing on a reduced set of foundational load cases and automating a full survey study via load combination and enveloping. If design go-backs are needed to ensure positive operational margins, the time otherwise spent performing the analysis survey manually can instead be spent on exploring more design alternatives for an equal allotment of time, thereby increasing opportunities to design a better performing product or even an equally well-performing product of lower weight. Furthermore, by having an automated post-processing procedure, the engineer is also given the opportunity of wrapping the automated process into an integrated multi-disciplinary optimization framework, such as Simcenter HEEDS, in order to automate the design exploration process as well.<\/p><h3><span style=\"text-decoration: underline;\"><span style=\"color: #3366ff;\"><a style=\"color: #3366ff; text-decoration: underline;\" href=\"https:\/\/share.hsforms.com\/1Xha1vzluR6yRz6jB_qxEdQ2ak4v\">Download Simcenter 3D Load Case Combination Materials Here<\/a><\/span><\/span><\/h3><h1><img loading=\"lazy\" class=\"alignleft wp-image-3271 size-thumbnail\" src=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/06\/josemarquez-150x150.png\" alt=\"\" width=\"150\" height=\"150\" srcset=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/06\/josemarquez-150x150.png 150w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/06\/josemarquez-300x300.png 300w, https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/06\/josemarquez.png 641w\" sizes=\"(max-width: 150px) 100vw, 150px\" \/>Written by Jos\u00e9 M\u00e1rquez<\/h1><p>Jos\u00e9 M\u00e1rquez is an Aerospace Engineer with a background in loads analysis, multi-disciplinary optimization, and software development. Outside of work, he enjoys gardening and rock climbing.<\/p>\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t<\/div>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t<\/div>\n\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t<\/section>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t<\/div>\n\t\t\t\t\t<\/div>\n\t\t","protected":false},"excerpt":{"rendered":"<p>Learn how NXOpen can be used to combine and envelop load cases in Simcenter 3D. Take advantage of this capability to achieve quicker analysis turnaround and architect a more seamless multi-disciplinary optimization workflow. Challenges: Large number of load case combinations Frequent design iterations Manual process is time-consuming with slow turnaround Majority of time spent performing [&hellip;]<\/p>\n","protected":false},"author":11,"featured_media":3278,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":{"content-type":""},"categories":[18],"tags":[227,228,101,117],"yoast_head":"<!-- This site is optimized with the Yoast SEO plugin v19.6 - https:\/\/yoast.com\/wordpress\/plugins\/seo\/ -->\n<title>Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python - M4 Engineering<\/title>\n<meta name=\"robots\" content=\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\" \/>\n<link rel=\"canonical\" href=\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/\" \/>\n<meta property=\"og:locale\" content=\"en_US\" \/>\n<meta property=\"og:type\" content=\"article\" \/>\n<meta property=\"og:title\" content=\"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python - M4 Engineering\" \/>\n<meta property=\"og:description\" content=\"Learn how NXOpen can be used to combine and envelop load cases in Simcenter 3D. Take advantage of this capability to achieve quicker analysis turnaround and architect a more seamless multi-disciplinary optimization workflow. Challenges: Large number of load case combinations Frequent design iterations Manual process is time-consuming with slow turnaround Majority of time spent performing [&hellip;]\" \/>\n<meta property=\"og:url\" content=\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/\" \/>\n<meta property=\"og:site_name\" content=\"M4 Engineering\" \/>\n<meta property=\"article:published_time\" content=\"2020-06-11T05:42:00+00:00\" \/>\n<meta property=\"article:modified_time\" content=\"2020-12-10T17:13:32+00:00\" \/>\n<meta property=\"og:image\" content=\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/06\/simcenter3d_title-scaled.jpg\" \/>\n\t<meta property=\"og:image:width\" content=\"2560\" \/>\n\t<meta property=\"og:image:height\" content=\"1196\" \/>\n\t<meta property=\"og:image:type\" content=\"image\/jpeg\" \/>\n<meta name=\"author\" content=\"Manderlee Baker\" \/>\n<meta name=\"twitter:card\" content=\"summary_large_image\" \/>\n<meta name=\"twitter:label1\" content=\"Written by\" \/>\n\t<meta name=\"twitter:data1\" content=\"Manderlee Baker\" \/>\n\t<meta name=\"twitter:label2\" content=\"Est. reading time\" \/>\n\t<meta name=\"twitter:data2\" content=\"10 minutes\" \/>\n<script type=\"application\/ld+json\" class=\"yoast-schema-graph\">{\"@context\":\"https:\/\/schema.org\",\"@graph\":[{\"@type\":\"Article\",\"@id\":\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#article\",\"isPartOf\":{\"@id\":\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/\"},\"author\":{\"name\":\"Manderlee Baker\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/person\/0552780eede0619e90723d63fe681341\"},\"headline\":\"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python\",\"datePublished\":\"2020-06-11T05:42:00+00:00\",\"dateModified\":\"2020-12-10T17:13:32+00:00\",\"mainEntityOfPage\":{\"@id\":\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/\"},\"wordCount\":2090,\"commentCount\":0,\"publisher\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#organization\"},\"keywords\":[\"NXOpen\",\"Python\",\"simcenter\",\"Simcenter 3D\"],\"articleSection\":[\"Technical Blog\"],\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"CommentAction\",\"name\":\"Comment\",\"target\":[\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#respond\"]}]},{\"@type\":\"WebPage\",\"@id\":\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/\",\"url\":\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/\",\"name\":\"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python - M4 Engineering\",\"isPartOf\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#website\"},\"datePublished\":\"2020-06-11T05:42:00+00:00\",\"dateModified\":\"2020-12-10T17:13:32+00:00\",\"breadcrumb\":{\"@id\":\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#breadcrumb\"},\"inLanguage\":\"en-US\",\"potentialAction\":[{\"@type\":\"ReadAction\",\"target\":[\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/\"]}]},{\"@type\":\"BreadcrumbList\",\"@id\":\"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#breadcrumb\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"name\":\"Home\",\"item\":\"https:\/\/www.m4-engineering.com\/\"},{\"@type\":\"ListItem\",\"position\":2,\"name\":\"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python\"}]},{\"@type\":\"WebSite\",\"@id\":\"https:\/\/www.m4-engineering.com\/#website\",\"url\":\"https:\/\/www.m4-engineering.com\/\",\"name\":\"M4 Engineering\",\"description\":\"Engineering\",\"publisher\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#organization\"},\"potentialAction\":[{\"@type\":\"SearchAction\",\"target\":{\"@type\":\"EntryPoint\",\"urlTemplate\":\"https:\/\/www.m4-engineering.com\/?s={search_term_string}\"},\"query-input\":\"required name=search_term_string\"}],\"inLanguage\":\"en-US\"},{\"@type\":\"Organization\",\"@id\":\"https:\/\/www.m4-engineering.com\/#organization\",\"name\":\"M4 Engineering\",\"url\":\"https:\/\/www.m4-engineering.com\/\",\"sameAs\":[],\"logo\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/\",\"url\":\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png\",\"contentUrl\":\"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png\",\"width\":2000,\"height\":684,\"caption\":\"M4 Engineering\"},\"image\":{\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/\"}},{\"@type\":\"Person\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/person\/0552780eede0619e90723d63fe681341\",\"name\":\"Manderlee Baker\",\"image\":{\"@type\":\"ImageObject\",\"inLanguage\":\"en-US\",\"@id\":\"https:\/\/www.m4-engineering.com\/#\/schema\/person\/image\/\",\"url\":\"https:\/\/secure.gravatar.com\/avatar\/5dca5f0d9a7f9b22fad4f28494464f82?s=96&d=mm&r=g\",\"contentUrl\":\"https:\/\/secure.gravatar.com\/avatar\/5dca5f0d9a7f9b22fad4f28494464f82?s=96&d=mm&r=g\",\"caption\":\"Manderlee Baker\"},\"url\":\"https:\/\/www.m4-engineering.com\/author\/mabaker\/\"}]}<\/script>\n<!-- \/ Yoast SEO plugin. -->","yoast_head_json":{"title":"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python - M4 Engineering","robots":{"index":"index","follow":"follow","max-snippet":"max-snippet:-1","max-image-preview":"max-image-preview:large","max-video-preview":"max-video-preview:-1"},"canonical":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/","og_locale":"en_US","og_type":"article","og_title":"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python - M4 Engineering","og_description":"Learn how NXOpen can be used to combine and envelop load cases in Simcenter 3D. Take advantage of this capability to achieve quicker analysis turnaround and architect a more seamless multi-disciplinary optimization workflow. Challenges: Large number of load case combinations Frequent design iterations Manual process is time-consuming with slow turnaround Majority of time spent performing [&hellip;]","og_url":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/","og_site_name":"M4 Engineering","article_published_time":"2020-06-11T05:42:00+00:00","article_modified_time":"2020-12-10T17:13:32+00:00","og_image":[{"width":2560,"height":1196,"url":"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/06\/simcenter3d_title-scaled.jpg","type":"image\/jpeg"}],"author":"Manderlee Baker","twitter_card":"summary_large_image","twitter_misc":{"Written by":"Manderlee Baker","Est. reading time":"10 minutes"},"schema":{"@context":"https:\/\/schema.org","@graph":[{"@type":"Article","@id":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#article","isPartOf":{"@id":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/"},"author":{"name":"Manderlee Baker","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/person\/0552780eede0619e90723d63fe681341"},"headline":"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python","datePublished":"2020-06-11T05:42:00+00:00","dateModified":"2020-12-10T17:13:32+00:00","mainEntityOfPage":{"@id":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/"},"wordCount":2090,"commentCount":0,"publisher":{"@id":"https:\/\/www.m4-engineering.com\/#organization"},"keywords":["NXOpen","Python","simcenter","Simcenter 3D"],"articleSection":["Technical Blog"],"inLanguage":"en-US","potentialAction":[{"@type":"CommentAction","name":"Comment","target":["https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#respond"]}]},{"@type":"WebPage","@id":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/","url":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/","name":"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python - M4 Engineering","isPartOf":{"@id":"https:\/\/www.m4-engineering.com\/#website"},"datePublished":"2020-06-11T05:42:00+00:00","dateModified":"2020-12-10T17:13:32+00:00","breadcrumb":{"@id":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/"]}]},{"@type":"BreadcrumbList","@id":"https:\/\/www.m4-engineering.com\/automating-load-case-combination-and-enveloping-in-simcenter-3d-using-nxopen-python\/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https:\/\/www.m4-engineering.com\/"},{"@type":"ListItem","position":2,"name":"Automating Load Case Combination and Enveloping in Simcenter 3D using NXOpen + Python"}]},{"@type":"WebSite","@id":"https:\/\/www.m4-engineering.com\/#website","url":"https:\/\/www.m4-engineering.com\/","name":"M4 Engineering","description":"Engineering","publisher":{"@id":"https:\/\/www.m4-engineering.com\/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https:\/\/www.m4-engineering.com\/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https:\/\/www.m4-engineering.com\/#organization","name":"M4 Engineering","url":"https:\/\/www.m4-engineering.com\/","sameAs":[],"logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/","url":"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png","contentUrl":"https:\/\/www.m4-engineering.com\/wp-content\/uploads\/2020\/05\/m4_logo_hw2-1.png","width":2000,"height":684,"caption":"M4 Engineering"},"image":{"@id":"https:\/\/www.m4-engineering.com\/#\/schema\/logo\/image\/"}},{"@type":"Person","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/person\/0552780eede0619e90723d63fe681341","name":"Manderlee Baker","image":{"@type":"ImageObject","inLanguage":"en-US","@id":"https:\/\/www.m4-engineering.com\/#\/schema\/person\/image\/","url":"https:\/\/secure.gravatar.com\/avatar\/5dca5f0d9a7f9b22fad4f28494464f82?s=96&d=mm&r=g","contentUrl":"https:\/\/secure.gravatar.com\/avatar\/5dca5f0d9a7f9b22fad4f28494464f82?s=96&d=mm&r=g","caption":"Manderlee Baker"},"url":"https:\/\/www.m4-engineering.com\/author\/mabaker\/"}]}},"_links":{"self":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts\/3234"}],"collection":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/users\/11"}],"replies":[{"embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/comments?post=3234"}],"version-history":[{"count":16,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts\/3234\/revisions"}],"predecessor-version":[{"id":3345,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/posts\/3234\/revisions\/3345"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/media\/3278"}],"wp:attachment":[{"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/media?parent=3234"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/categories?post=3234"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/www.m4-engineering.com\/wp-json\/wp\/v2\/tags?post=3234"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}